#!/bin/bash
set -o pipefail
cairo-watch-header

# Function to execute commands and handle errors
execute_command() {
	command="$1"
	debug_print=$2
	output=$(eval "$command" 2>&1)
	status=$?
	# Error
	if [ $status -ne 0 ]; then
		if [ $debug_print -eq 1 ]; then
			# Need to see all errors
			echo "$output"
		else
			# Error: failed to compile:
			test_fail=$(echo "$output" | awk '/failures:/')
			compile_fail=$(echo "$output" | awk '/Error: failed to compile:/')
			if [[ -n "$compile_fail" ]]; then
				# I dont want to see all errors
				echo -e "\033[31mCOMPILATION ERROR\033[0m"
				echo "$output" | head -n 15
				exit 1
			elif [[ -n "$test_fail" ]]; then
				# I dont want to see all errors
				echo -e "\033[31mTESTING ERROR\033[0m"
				result=$(echo "$output" | awk '/failures:/,/make: \*\*\* .* Error/')
				echo "$result"
			else
				echo -e "Something Failed. Maybe passed some wrong arguments. Allowed \n --debug-print"
			fi

		fi
	else
		# Command exited successfully
		if [ $debug_print -eq 1 ]; then
			# Need to see all prints
			echo "$output"
		else
			echo -e "\033[32mALL TEST PASS\033[0m"
		fi
	fi
}

filtered_args=()
should_debug_print=0
starknet_project=0
for arg in "$@"; do
	if [ "$arg" != '--debug-print' ]; then
		filtered_args+=("$arg")
	else
		should_debug_print=1
	fi
done

# Combine the filtered arguments into a single string
ARGS="${filtered_args[*]}"

if [ $# -eq 0 ]; then
	command="unbuffer make"
else
	# Pass the ARGS string to the make command
	command="unbuffer make test_with_args ARGS=\"$ARGS\""
fi

# Execute command
execute_command "$command" $should_debug_print
