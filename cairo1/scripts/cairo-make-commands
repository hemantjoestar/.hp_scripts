#!/bin/bash
set -o pipefail
cairo-watch-header

# Function to execute commands and handle errors
execute_command() {
	output=$(eval "make compile" 2>&1)
	status=$?
	if [ $status -ne 0 ]; then
		# I dont want to see all errors
		echo -e "\033[31mCOMPILATION ERROR\033[0m"
		echo "$output" | head -n 15
		exit 1
	else
		# Command exited successfully
		echo -e "\033[32mCOMPILATION OK\033[0m"
	fi
	command="$1"
	debug_print=$2
	output=$(eval "$command" 2>&1)
	status=$?
	# Error
	if [ $status -ne 0 ]; then
		echo -e "\033[31mTESTING ERROR\033[0m"
		if [ $debug_print -eq 1 ]; then
			# Need to see all errors
			echo "$output"
		else
			output=$(echo "$output" | awk '/failures:/,/make: \*\*\* .* Error/')
			if [[ -z "$output" ]]; then
				echo -e "Passed some wrong arguments. Allowed \n --debug-print"
			else
				echo "$output"
			fi

		fi
	else
		# Command exited successfully
		if [ $debug_print -eq 1 ]; then
			# Need to see all prints
			echo "$output"
		else
			echo -e "\033[32mALL TEST PASS\033[0m"
		fi
	fi
}

filtered_args=()
should_debug_print=0
for arg in "$@"; do
	if [ "$arg" != '--debug-print' ]; then
		filtered_args+=("$arg")
	else
		should_debug_print=1
	fi
done

# Combine the filtered arguments into a single string
ARGS="${filtered_args[*]}"

if [ $# -eq 0 ]; then
	command="unbuffer make"
else
	# Pass the ARGS string to the make command
	command="unbuffer make test_with_args ARGS=\"$ARGS\""
fi

# Execute command
execute_command "$command" $should_debug_print
